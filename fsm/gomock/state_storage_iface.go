// Code generated by MockGen. DO NOT EDIT.
// Source: state_storage_iface.go
//
// Generated by this command:
//
//	mockgen -source=state_storage_iface.go -destination=gomock/state_storage_iface.go -package=gomock -mock_names=StateStorage=StateStorage
//

// Package gomock is a generated GoMock package.
package gomock

import (
	context "context"
	reflect "reflect"

	fsm "github.com/agurinov/gopl/fsm"
	gomock "go.uber.org/mock/gomock"
)

// StateStorage is a mock of StateStorage interface.
type StateStorage[C fsm.Context] struct {
	ctrl     *gomock.Controller
	recorder *StateStorageMockRecorder[C]
}

// StateStorageMockRecorder is the mock recorder for StateStorage.
type StateStorageMockRecorder[C fsm.Context] struct {
	mock *StateStorage[C]
}

// NewStateStorage creates a new mock instance.
func NewStateStorage[C fsm.Context](ctrl *gomock.Controller) *StateStorage[C] {
	mock := &StateStorage[C]{ctrl: ctrl}
	mock.recorder = &StateStorageMockRecorder[C]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *StateStorage[C]) EXPECT() *StateStorageMockRecorder[C] {
	return m.recorder
}

// GetState mocks base method.
func (m *StateStorage[C]) GetState(arg0 context.Context, arg1 C) (fsm.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(fsm.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *StateStorageMockRecorder[C]) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*StateStorage[C])(nil).GetState), arg0, arg1)
}

// PushState mocks base method.
func (m *StateStorage[C]) PushState(arg0 context.Context, arg1 C, arg2 fsm.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushState", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushState indicates an expected call of PushState.
func (mr *StateStorageMockRecorder[C]) PushState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushState", reflect.TypeOf((*StateStorage[C])(nil).PushState), arg0, arg1, arg2)
}
