// Code generated by MockGen. DO NOT EDIT.
// Source: lib_iface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	kafka "github.com/agurinov/gopl/kafka"
	gomock "github.com/golang/mock/gomock"
)

// ConsumerLibrary is a mock of ConsumerLibrary interface.
type ConsumerLibrary struct {
	ctrl     *gomock.Controller
	recorder *ConsumerLibraryMockRecorder
}

// ConsumerLibraryMockRecorder is the mock recorder for ConsumerLibrary.
type ConsumerLibraryMockRecorder struct {
	mock *ConsumerLibrary
}

// NewConsumerLibrary creates a new mock instance.
func NewConsumerLibrary(ctrl *gomock.Controller) *ConsumerLibrary {
	mock := &ConsumerLibrary{ctrl: ctrl}
	mock.recorder = &ConsumerLibraryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConsumerLibrary) EXPECT() *ConsumerLibraryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *ConsumerLibrary) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *ConsumerLibraryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*ConsumerLibrary)(nil).Close))
}

// Commit mocks base method.
func (m *ConsumerLibrary) Commit(arg0 context.Context, arg1 kafka.EventPosition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *ConsumerLibraryMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*ConsumerLibrary)(nil).Commit), arg0, arg1)
}

// ConsumeBatch mocks base method.
func (m *ConsumerLibrary) ConsumeBatch(arg0 context.Context, arg1 uint) ([][]byte, kafka.EventPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeBatch", arg0, arg1)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(kafka.EventPosition)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConsumeBatch indicates an expected call of ConsumeBatch.
func (mr *ConsumerLibraryMockRecorder) ConsumeBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeBatch", reflect.TypeOf((*ConsumerLibrary)(nil).ConsumeBatch), arg0, arg1)
}

// Init mocks base method.
func (m *ConsumerLibrary) Init(arg0 context.Context, arg1 kafka.ConfigMap, arg2 kafka.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *ConsumerLibraryMockRecorder) Init(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*ConsumerLibrary)(nil).Init), arg0, arg1, arg2)
}

// ProducerLibrary is a mock of ProducerLibrary interface.
type ProducerLibrary struct {
	ctrl     *gomock.Controller
	recorder *ProducerLibraryMockRecorder
}

// ProducerLibraryMockRecorder is the mock recorder for ProducerLibrary.
type ProducerLibraryMockRecorder struct {
	mock *ProducerLibrary
}

// NewProducerLibrary creates a new mock instance.
func NewProducerLibrary(ctrl *gomock.Controller) *ProducerLibrary {
	mock := &ProducerLibrary{ctrl: ctrl}
	mock.recorder = &ProducerLibraryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProducerLibrary) EXPECT() *ProducerLibraryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *ProducerLibrary) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *ProducerLibraryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*ProducerLibrary)(nil).Close))
}

// Init mocks base method.
func (m *ProducerLibrary) Init(arg0 context.Context, arg1 kafka.ConfigMap, arg2 kafka.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *ProducerLibraryMockRecorder) Init(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*ProducerLibrary)(nil).Init), arg0, arg1, arg2)
}

// ProduceBatch mocks base method.
func (m *ProducerLibrary) ProduceBatch(arg0 context.Context, arg1 ...[]byte) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceBatch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceBatch indicates an expected call of ProduceBatch.
func (mr *ProducerLibraryMockRecorder) ProduceBatch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceBatch", reflect.TypeOf((*ProducerLibrary)(nil).ProduceBatch), varargs...)
}

// MockComboLibrary is a mock of ComboLibrary interface.
type MockComboLibrary struct {
	ctrl     *gomock.Controller
	recorder *MockComboLibraryMockRecorder
}

// MockComboLibraryMockRecorder is the mock recorder for MockComboLibrary.
type MockComboLibraryMockRecorder struct {
	mock *MockComboLibrary
}

// NewMockComboLibrary creates a new mock instance.
func NewMockComboLibrary(ctrl *gomock.Controller) *MockComboLibrary {
	mock := &MockComboLibrary{ctrl: ctrl}
	mock.recorder = &MockComboLibraryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComboLibrary) EXPECT() *MockComboLibraryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockComboLibrary) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockComboLibraryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockComboLibrary)(nil).Close))
}

// Commit mocks base method.
func (m *MockComboLibrary) Commit(arg0 context.Context, arg1 kafka.EventPosition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockComboLibraryMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockComboLibrary)(nil).Commit), arg0, arg1)
}

// ConsumeBatch mocks base method.
func (m *MockComboLibrary) ConsumeBatch(arg0 context.Context, arg1 uint) ([][]byte, kafka.EventPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeBatch", arg0, arg1)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(kafka.EventPosition)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConsumeBatch indicates an expected call of ConsumeBatch.
func (mr *MockComboLibraryMockRecorder) ConsumeBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeBatch", reflect.TypeOf((*MockComboLibrary)(nil).ConsumeBatch), arg0, arg1)
}

// Init mocks base method.
func (m *MockComboLibrary) Init(arg0 context.Context, arg1 kafka.ConfigMap, arg2 kafka.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockComboLibraryMockRecorder) Init(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockComboLibrary)(nil).Init), arg0, arg1, arg2)
}

// ProduceBatch mocks base method.
func (m *MockComboLibrary) ProduceBatch(arg0 context.Context, arg1 ...[]byte) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceBatch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceBatch indicates an expected call of ProduceBatch.
func (mr *MockComboLibraryMockRecorder) ProduceBatch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceBatch", reflect.TypeOf((*MockComboLibrary)(nil).ProduceBatch), varargs...)
}
