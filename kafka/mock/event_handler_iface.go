// Code generated by MockGen. DO NOT EDIT.
// Source: event_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	kafka "github.com/agurinov/gopl/kafka"
	gomock "github.com/golang/mock/gomock"
)

// EventHandler is a mock of EventHandler interface.
type EventHandler[E kafka.Event] struct {
	ctrl     *gomock.Controller
	recorder *EventHandlerMockRecorder[E]
}

// EventHandlerMockRecorder is the mock recorder for EventHandler.
type EventHandlerMockRecorder[E kafka.Event] struct {
	mock *EventHandler[E]
}

// NewEventHandler creates a new mock instance.
func NewEventHandler[E kafka.Event](ctrl *gomock.Controller) *EventHandler[E] {
	mock := &EventHandler[E]{ctrl: ctrl}
	mock.recorder = &EventHandlerMockRecorder[E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *EventHandler[E]) EXPECT() *EventHandlerMockRecorder[E] {
	return m.recorder
}

// Handle mocks base method.
func (m *EventHandler[E]) Handle(arg0 context.Context, arg1 E) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *EventHandlerMockRecorder[E]) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*EventHandler[E])(nil).Handle), arg0, arg1)
}

// EventBatchHandler is a mock of EventBatchHandler interface.
type EventBatchHandler[E kafka.Event] struct {
	ctrl     *gomock.Controller
	recorder *EventBatchHandlerMockRecorder[E]
}

// EventBatchHandlerMockRecorder is the mock recorder for EventBatchHandler.
type EventBatchHandlerMockRecorder[E kafka.Event] struct {
	mock *EventBatchHandler[E]
}

// NewEventBatchHandler creates a new mock instance.
func NewEventBatchHandler[E kafka.Event](ctrl *gomock.Controller) *EventBatchHandler[E] {
	mock := &EventBatchHandler[E]{ctrl: ctrl}
	mock.recorder = &EventBatchHandlerMockRecorder[E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *EventBatchHandler[E]) EXPECT() *EventBatchHandlerMockRecorder[E] {
	return m.recorder
}

// Handle mocks base method.
func (m *EventBatchHandler[E]) Handle(arg0 context.Context, arg1 []E) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *EventBatchHandlerMockRecorder[E]) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*EventBatchHandler[E])(nil).Handle), arg0, arg1)
}
